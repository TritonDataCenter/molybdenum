---
title: Molybdenum (Mo)
markdown2extras: wiki-tables, code-friendly, cuddled-lists
---

# Molybdenum (Mo)

**This is Mo v2. A re-write of molybdenum.**

Molybdenum (of "Mo" for short) is a git repo browser written in node.js.
Basically you setup post-receive hooks in your central git repos that
post to the Mo api (the GH hooks post format is supported). Mo will then pull
the latest changes -- i.e. it needs access to the repos. The URL structure
is much like github's, though without the username level.

Mo has an API as well that might be useful for tooling that needs some info
about a set of related repositories for a project.

Generally Mo isn't a useful upgrade to GitHub, but can be useful if you
have private git repos that are not in GitHub -- e.g. your own Gitolite or
Gitosis setup.


# Mo Objects

TODO: explain the object model


# Mo API Client

There is a node.js client included with the molybdenum repo. Basic usage:

    var molybdenum = require('molybdenum');
    var url = 'http://localhost:8123';
    var client = molybdenum.createClient({url: url});
    client.ping(function (err, pong, res) {
        console.log(JSON.stringify(pong, null, 4));
    });

For now, read "lib/client.js" for full usage details.

# Mo CLI Client

There is a CLI `mo` for using the molybdenum API. Basic usage:

    $ export PATH=.../molybdenum/bin:$PATH
    $ export MO2_URL=http://localhost:8123
    $ mo
    ... help output ...
    $ mo ping
    {
        "ping": "pong",
        "version": "2.0.0",
        "molybdenum": true,
        "pid": 3235
    }


# Site Map

||**Name**||**Endpoint**||**Notes**||
||[ListRepos](#ListRepos)||GET /api/repos||List available repositories.||
|| * * * || * * * || * * * ||
||[Ping](#Ping)||GET /api/ping||Ping if the server is up.||
||[GetState](#GetState)||GET /api/state||Dump internal state of the server.||

<!--
    GET /api/repos (ListRepos)
    POST /api/repos (FetchRepo)
    GET /api/repos/:repo (GetRepo)
    DELETE /api/repos/:repo (DeleteRepo)
    GET /api/repos/:repo/commits/:ref (GetRepoCommitsRef)
    GET /api/repos/:repo/commit/:id (GetRepoCommit)
    GET /api/repos/:repo/refs (GetRepoRefs)
    GET /api/repos/:repo/refs/:ref[/:path] (GetRepoObject)
    GET /api/commit/:id (GetCommit)
    GET /api/commits/:ref (GetCommitsRef)
    POST /api/repos/:repo?action=tag (TagRepo)
    POST /api/repos/:repo?action=untag (UntagRepo)
    GET /api/tags (GetTags)
    GET /api/tags/:tag (GetTaggedRepos)
    GET /api/tags/:tag/commits/:ref (GetTaggedCommitsRef)

    GET / (ViewRepos)
    GET /commits (ViewCommits) ->
    GET /commits/:ref (ViewCommitsRef)
    GET /:repo (ViewRepo)
    GET /:repo/tree/:ref/:path (ViewRepoTree)
    GET /:repo/blob/:ref/:path (ViewRepoBlob)
    GET /:repo/raw/:ref/:path (ViewRepoRaw)
        TODO: ^^^ can the ':ref' on these three be any commitish? e.g. a sha. Josh wants that
    GET /:repo/commit/:id (ViewRepoCommit)
    GET /:repo/commits/:ref (ViewRepoCommits)
    GET /tags (ViewTags)
    GET /tags/:tag (ViewTaggedRepos)
    GET /tags/:tag (ViewTaggedCommits) ->
    GET /tags/:tag/commits/:ref (ViewTaggedCommitsRef)
-->


# API Errors

||**Code**||**HTTP status code**||**Description**||
||InternalError||500||A general fallback for some error.||

TODO: error

# API

## ListRepos (GET /api/repos)

TODO: describe ListRepos

### Inputs

None. TODO: search by name substring, tags
||**Field**||**Type**||**Description**||
||XXX||UUID||Only list images visible to this account. A user can only see: (a) active public images, (b) active private images for which they are listing in the ACL, and (c) their own images.||

TODO: inputs

### Returns

TODO

### Errors

See [API Errors](#api-errors) section above.

### Example

    {
      "repositories": [
        {
          "name": "eol",
          "url": "https://github.com/trentm/eol.git",
          // TODO: internal, remove
          "dir": "/data/molybdenum/repos/eol.git",
          // Note: The following are internal. Will probably be removed.
          "isCloned": true,
          "isFetchPending": false,
          "numActiveFetches": 0,
          ...
        }
      ]
    }

## FetchRepo (POST /api/repos)

Let the server know about a new push to a repo. The request body must be a
JSON object of the following form (compatible with the Github URL
post-receive hook JSON format <http://help.github.com/post-receive-hooks/>):

    {
      "repository": {
        "url": $git_clone_url,
        "name": $name
      }
    }


## Example

XXX actual example

    $ echo '{
        "repository": {
            "url": "git@code.example.com:cool-product.git",
            "name": "cool-product"
        }
    }' | curl localhost:8123/api/repos -X POST -H "Content-Type: application/json" -d @-

    Status: 200
    ...

    {
      "repository": {
        "name": "cool-product",
        "url": "git@code.example.com:cool-product.git",
        "isCloned": false,
        "isFetchPending": true
      }
    }


## Ping (GET /ping)

A simple ping to check to health of the Mo server. Here "pid" is the PID
of the server process. This is helpful for the test suite.

### Inputs

||**Field**||**Type**||**Description**||
||error||String||Optional. An error code name, e.g. "ResourceNotFound" to simulate an error response.||
||message||String||Optional. The error message to include in the simulated error response. Defaults to "pong".||

### Returns

TODO: ping responses

When not simulating an error response, a "pong" object is returned:

||**Field**||**Type**||**Description**||
||ping||String||"pong"||
||pid||String||The PID of Molybdenum server process (useful for testing).||
||version||String||The version of the Molybdenum server.||
||molybdenum||Boolean||true||

When simulating an error, the HTTP response code depends on the error type
and the response body is an JSON object with:

||**Field**||**Type**||**Description**||
||code||String||A restify error code, e.g. "ResourceNotFound", "InternalError". ||
||message||String||Error message.||

### Examples

    $ curl -i localhost:8123/ping
    HTTP/1.1 200 OK
    Content-Type: application/json
    Content-Length: 80
    Date: Sat, 22 Jun 2013 00:25:21 GMT
    Server: Molybdenum/2.0.0
    x-request-id: 3940edc0-dad2-11e2-9b63-db1bdec2c39d
    x-response-time: 1
    x-server-name: grape.local
    Connection: keep-alive

    {
      "ping": "pong",
      "version": "2.0.0",
      "molybdenum": true,
      "pid": 27010
    }

Simulating an error response:

    $ curl -i localhost:8123/ping?error
    HTTP/1.1 500 Internal Server Error
    Content-Type: application/json
    Content-Length: 50
    Date: Sat, 22 Jun 2013 00:26:06 GMT
    Server: Molybdenum/2.0.0
    x-request-id: 53e52650-dad2-11e2-9b63-db1bdec2c39d
    x-response-time: 1
    x-server-name: grape.local
    Connection: keep-alive

    {
      "code": "InternalError",
      "message": "boom"
    }


## GetState (GET /api/state)

Dump internal state of the server. This is an admin-only endpoint to assist
with dev and debugging of the server.

### Inputs

None.

### Returns

||**Field**||**Description**||
||TODO||TODO||


# Server Configuration

Reference docs on configuration vars to molybdenum. Default values are in
"etc/defaults.json". Custom values are provided in a JSON file passed in with
the "-f CFG-FILE" command-line option. Note that given custom values override
full top-level keys in the factory settings. For example: if providing
'auth', one must provide the whole 'auth' object.

||**var**||**type**||**default**||**description**||
||port||Integer||8123||Port number on which to listen.||
||hostname||String||0.0.0.0||Hostname on which to listen.||
||serverName||String||Molybdenum/$version||Name of the HTTP server. This value is present on every HTTP response in the 'server' header.||
||logLevel||String or Number||debug||Level at which to log. One of the supported Bunyan log levels. This is overridden by the `-d|--debug` switch.||
||maxSockets||Number||100||**TODO** Maximum number of sockets for external API calls||
||auth||Object||-||**TODO** Auth details.||
||auth.type||String||none||One of 'none' or 'basic' (HTTP Basic Auth).||
||auth.user||String||anonymous||Optional. Only used for 'none' auth. Username to assign to `req.remoteUser`.||
||auth.users||Object||-||Required if `auth.type === 'basic'`. A mapping of username to bcrypt-hashed password. Use the `tools/hash-basic-auth-password` tool to create the hash.||
||auth.realm||String||-||Realm used for basic auth challenge. Defaults to `serverName` value.||
||dataDir||String||/var/db/mo2/data||Path to a local dir for storing app data.||
||database||Object||-||**TODO** Auth details.||
||database.type||String||flat-files||Currently only 'flat-files' is supported. 'leveldb' is planned.||
||database.dir||String||/var/db/mo2/db||Require for 'flat-files' database type. The dir in which to store db files.||


# Operator Guide

TODO

