{{> top }}
{{> nav }}

<div id="wrapper">
<div id="main">

{{> commitbox}}

<h2>
{{#breadcrumbs}}
{{#href}}<a href="{{href}}">{{/href}}{{name}}{{#href}}</a>{{/href}}&nbsp;{{#dir}}/&nbsp;{{/dir}}
{{/breadcrumbs}}
</h2>

<div id="actions">
    <a href="{{rawUrl}}">raw</a>
</div>

<div id="data">
{{#text}}
<pre id="workhorse" style="display:none" class="prettyprint">{{text}}</pre>
<table cellpadding="0" cellspacing="0" class="code"><tbody><tr>
<td><pre class="linenums">{{{linenums_pre}}}</pre></td>
<td width="100%"><pre class="codetext" style="padding-left: 1em;">{{text}}</pre></td>
</tr></tbody></table>
{{/text}}
{{^text}}
{{#isImage}}
<img src="{{rawUrl}}" />
{{/isImage}}
{{^isImage}}
<p>Binary content. (TODO: download link)</p>
{{/isImage}}
{{/text}}
</div>


</div> <!-- end of #wrapper -->
</div> <!-- end of #main -->

{{> bottom_footer }}
{{> bottom_scripts }}

{{#text}}
<link href="/static/prettify/prettify.css" type="text/css" rel="stylesheet" />
<script type="text/javascript" src="/static/prettify/prettify.js"></script>
<script>
$(document).ready(function() {
  prettyPrint(function() {
    // Transform the prettify innerHTML:
    //    ...
    //    </span><span class="str">"""The eol test suite entry point."""</span><span class="pln">
    //
    //    </span><span class="kwd">import</span><span class="pln"> os
    //    </span>...
    // such that each line has this structure:
    //    <div class="line" id="LC{{n}}" style="background-color: transparent; ">{{line}}<br/></div>
    var lineSplitter = /(<span class="[a-z]*?">)([^<]*?\n[^<]*?)(<\/span>)/;
    var html = $('#workhorse')[0].innerHTML;
    var srcBits = html.split(lineSplitter);
    var lineNum = 1;
    var dstBits = [
      '<div class="line" id="LC'+lineNum+'" style="background-color: transparent;">'
    ];
    var s;
    //console.log(html.split(lineSplitter));
    while (true) {
      if (srcBits.length == 0) {
        break
      } else if (srcBits.length == 1) {
        dstBits.push(srcBits.shift());
        break;
      } else {
        dstBits.push(srcBits.shift());
        var spanStart = srcBits.shift();
        var lines = srcBits.shift().split('\n');
        var spanEnd = srcBits.shift();
        while (true) {
          s = lines.shift();
          if (s.length !== 0) {
            dstBits.push(spanStart);
            dstBits.push(s);
            dstBits.push(spanEnd);
          }
          if (lines.length === 0) {
            break;
          }
          dstBits.push('<br/></div>');
          lineNum += 1;
          dstBits.push('<div class="line" id="LC'+lineNum+'" style="background-color: transparent;">');
        }
      }
    }
    dstBits.push('<br/></div>')
    //console.log(dstBits);
    $('pre.codetext')[0].innerHTML = dstBits.join('');
    // Remove padding that was just added to avoid jump when
    // '<div class="line">' is added.
    $('pre.codetext:first').css("padding-left", "0");

    // Setup for highlighting code lines.
    Hub.highlightCodeLines();
    $(".linenums span").mousedown(Hub.onCodeLineNumMouseDown);
  });
})
</script>
{{/text}}

{{> bottom_end }}
