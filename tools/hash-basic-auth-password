#!/usr/bin/env node
/*
 * Copyright 2012 Joyent, Inc.  All rights reserved.
 *
 * Hash (with bcrypt) a password for use in IMGAPI's basic authentication
 * auth.
 *
 * Usage:
 *      $ ./bin/hash-basic-auth-password
 *      Password: <enter password>
 *      &F@JHdls
 *
 * Now enter that password into the 'auth.users' object of your IMGAPI config.
 * E.g.:
 *      {
 *          ...
 *          'auth': {
 *              'type': 'basic',
 *              'users': {
 *                  'joe': '&F@JHdls',
 *                  ...
 *              }
 *          },
 *          ...
 *      }
 */

var path = require('path');
var bcrypt = require('bcrypt');



//---- support stuff

/**
 * Get a password from stdin.
 *
 * Adapted from <http://stackoverflow.com/a/10357818/122384>.
 *
 * @param prompt {String} Optional prompt. Default 'Password: '.
 * @param callback {Function} `function (cancelled, password)` where
 *      `cancelled` is true if the user aborted (Ctrl+C).
 *
 * Limitations: Not sure if backspace is handled properly.
 */
function getPassword(prompt, callback) {
    if (callback === undefined) {
        callback = prompt;
        prompt = undefined;
    }
    if (prompt === undefined) {
        prompt = 'Password: ';
    }
    if (prompt) {
        process.stdout.write(prompt);
    }

    var stdin = process.stdin;
    stdin.resume();
    stdin.setRawMode(true);
    stdin.resume();
    stdin.setEncoding('utf8');

    var password = '';
    stdin.on('data', function (ch) {
        ch = ch + '';

        switch (ch) {
        case '\n':
        case '\r':
        case '\u0004':
            // They've finished typing their password
            process.stdout.write('\n');
            stdin.setRawMode(false);
            stdin.pause();
            callback(false, password);
            break;
        case '\u0003':
            // Ctrl-C
            callback(true);
            break;
        default:
            // More passsword characters
            process.stdout.write('*');
            password += ch;
            break;
        }
    });
}



//---- mainline

getPassword(function (cancelled, password) {
    if (cancelled) {
        process.exit(1);
    }
    bcrypt.hash(password, 10, function (err, hash) {
        if (err) {
            console.error('%s: error hashing: %s',
                path.basename(process.argv[1]), err);
            process.exit(2);
        }
        console.log(hash);
    });
});
