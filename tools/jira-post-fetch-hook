#!/usr/bin/env python
# Copyright 2011 (c) Trent Mick.

"""A git post-receive hook to add a Jira ticket comment for the commit to
each referenced ticket in the commit message (this for each commit in
the push).

Requirements:
- Python >= 2.6 (not Python 3.x). Currently the only Python 2.6 requirement
  is the `json` module in the stdlib. Could easily allow Python 2.5 by
  including and using simplejson.py <http://pypi.python.org/pypi/simplejson/>.
- See Molybdenum docs on this hook for configuration.
"""

__version__ = "1.1.0"

import os
import sys
import xmlrpclib
import re
import json
import codecs
from fnmatch import fnmatch

# Ignore xmllib deprecation warning in xmlrpclib usage in Python 2.6.
import warnings
warnings.simplefilter("ignore")



#---- globals & errors

# Note: The space btwn URL and closing ']' is intentional so that gmail
# doesn't include the ']*' as part of the link (breaking it). The extra
# space doesn't confuse Jira, so all good.
TEMPLATE = u"""
{panel:borderColor=#ccc|borderStyle=solid|bgColor=#d3e1fe}
*[%(repo)s commit %(sha)s|%(moUrl)s/%(repo)s/commit/%(sha)s ]* *(**[branch %(branch)s|%(moUrl)s/%(repo)s/commits/%(branch)s ]**, by %(author)s)*

%(message)s
{panel}
"""

DRY_RUN = False
GIT = "git"
DEBUG = False  # set to True for more logging output.


class Error(Exception):
    pass


cfg = None   # object set in `main`.



#---- internal support routines

def printError(errmsg):
    lines = [
        "* * *",
        "* cd %s && MOLYBDENUM_CONFIG=%s %s %s" % (
            os.getcwd(), os.environ["MOLYBDENUM_CONFIG"], 
            sys.executable, ' '.join(sys.argv)),
        "*"
    ]
    lines += ["* "+s for s in errmsg.splitlines(False)]
    if cfg and "admin" in cfg:
        lines.append("*")
        lines.append("* Please report this full error message to: %s" % cfg["admin"])
    lines.append("* * *")
    print('\n'.join(lines))

def run(argv):
    """Run the given cmd and return (stdout, stderr).
    Raise on non-zero retval.
    """
    from subprocess import Popen, PIPE
    if DEBUG: print "Running command: %r" % argv
    p = Popen(argv, stdout=PIPE, stderr=PIPE, close_fds=True)
    p.wait()
    stdout = p.stdout.read()
    stderr = p.stderr.read()
    if p.returncode:
        raise Error("error (%d) running '%s'\n\n-- stdout:\n%s\n-- stderr:\n%s\n"
            % (p.returncode, ' '.join(argv), stdout, stderr))
    return (stdout, stderr)

def genCommits(startRev, endRev):
    """Generate commits (with commit info) for each commit from
    `startRev` (exclusive) to `endRev` (inclusive).
    """
    stdout, stderr = run([GIT, "log", "--pretty=medium",
        "%s..%s" % (startRev, endRev)])
    for commitStr in re.compile(r'^commit ', re.M).split(stdout):
        if not commitStr:
            continue
        sha, rest = commitStr.split(None, 1)
        author = rest.split('\n', 1)[0].split(': ', 1)[1].split('<', 1)[0].strip()
        meta, message = re.compile(r'^    ', re.M).split(rest, 1)
        if DEBUG:
            print "Found commit %s by %s: '%s...'" % (
                sha, author, message[:20].replace('\n', ' '))
        yield {"sha": sha, "message": message, "author": author}

def genJiraIssues(commitInfo, jiraCfg):
    if "jiraProjects" in jiraCfg:
        jiraIssueRe = re.compile(r"\b((%s)-(\d+))\b"
            % '|'.join(jiraCfg["jiraProjects"]))
    else:
        jiraIssueRe = re.compile(r'\b([A-Z]{2,}-\d+)\b')
    already = set()
    for match in jiraIssueRe.finditer(commitInfo["message"]):
        issue = match.group(1)
        if issue not in already:
            if DEBUG:
                print "Found JIRA ref in commit %s: %s" % (
                    commitInfo["sha"], issue)
            yield issue
            already.add(issue)

_authTokenCache = None
def getAuthToken(server, jiraCfg):
    global _authTokenCache
    if _authTokenCache is None:
        _authTokenCache = server.jira1.login(
            *jiraCfg["jiraCredentials"].split(':', 1))
    return _authTokenCache

def jiraCommentEscape(s):
    """Return a version of `s` with jira comment syntax escaped.

    Note: I haven't done an exhaustive search of jira comment syntax here,
    just handling the cases I've seen in practice.
    """
    return s.replace('{', '\\{')



#---- mainline

def main(argv=sys.argv):
    print "Adding commit info to referenced Jira tickets."

    if len(argv[1:]) != 3:
        raise Error("incorrect number of args: argv=%r" % argv)
    oldrev, newrev, refname = argv[1:]

    global cfg
    configPath = os.environ["MOLYBDENUM_CONFIG"]
    if not os.path.exists(configPath):
        raise Error("'%s' config file (from MOLYBDENUM_CONFIG envvar) "
            "does not exist." % configPath)
    fp = codecs.open(configPath, 'r', "utf-8")
    try:
        topLevel = json.load(fp)
    finally:
        fp.close()
    cfg = topLevel["jiraPostFetchHook"]
    cfg["admin"] = ("admin" in cfg and cfg["admin"]
        or "adminName" in topLevel and topLevel["adminName"]
        or "Your Molybdenum Administrator")
    if DRY_RUN:
        cfg["dryRun"] = True
    elif "dryRun" not in cfg:
        cfg["dryRun"] = False

    repo = os.path.basename(os.getcwd())
    if repo.endswith(".git"):
        repo = repo[:-len(".git")]
    branch = refname.split('/')[-1]

    for jiraCfg in cfg.get("jiras", []):
        whitelist = jiraCfg.get("branchWhitelist") or []
        blacklist = jiraCfg.get("branchBlacklist") or []
        if whitelist or blacklist:
            # Skip this branch or no?
            checkPath = "%s/%s" % (repo, branch)
            if whitelist:
                for pat in whitelist:
                    if fnmatch(checkPath, pat):
                        break
                else:
                    print "\t> Skip repo/branch '%s' (doesn't match whitelist)" \
                        % checkPath
                    return
            for pat in blacklist:
                if fnmatch(checkPath, pat):
                    print "\t> Skip repo/branch '%s' (matches blacklist '%s')" \
                        % (checkPath, pat)
                    return

        server = xmlrpclib.ServerProxy(jiraCfg["jiraUrl"] + "/rpc/xmlrpc")
        for commitInfo in reversed([c for c in genCommits(oldrev, newrev)]):
            sha = commitInfo["sha"][:7]
            data = {
                "moUrl": jiraCfg["moUrl"],
                "repo": repo,
                "sha": sha,
                "author": commitInfo["author"].decode('utf8'),
                "message": jiraCommentEscape(commitInfo["message"].rstrip()).decode('utf8'),
                "branch": branch
            }
            print "\t# %s" % jiraCfg['jiraUrl']
            for jira in genJiraIssues(commitInfo, jiraCfg):
                print "\t> %s (commit %s, branch %s)" % (jira, sha, branch)
                comment = TEMPLATE % data
                # Python: demerit. Basically can't get non-ascii through
                # the xmlrpclib.py 'dumps' function. I'm giving up on
                # trying to get that to work... with Python 2.7 anyway.
                comment = comment.encode('ascii', 'replace')
                if not cfg["dryRun"]:
                    authToken = getAuthToken(server, jiraCfg)
                    try:
                        server.jira1.addComment(authToken, jira, comment)
                    except Exception, e:
                        print "\t\twarning: could not add comment to %s: %s" \
                            % (jira, e)

        #TODO: add a guard if too many?


if __name__ == "__main__":
    try:
        retval = main(sys.argv)
    except KeyboardInterrupt:
        sys.exit(1)
    except SystemExit:
        raise
    except:
        import traceback
        exc_info = sys.exc_info()
        if hasattr(exc_info[0], "__name__"):
            exc_class, exc, tb = exc_info
            tb_path, tb_lineno, tb_func = traceback.extract_tb(tb)[-1][:3]
            errmsg = "%s (%s:%s in %s)" % (exc, tb_path,
                tb_lineno, tb_func)
        else:  # string exception
            errmsg = exc_info[0]
        errmsg += "\n\n" + ''.join(traceback.format_exception(*exc_info))
        printError(errmsg)
        sys.exit(1)
    else:
        sys.exit(retval)
