#!/usr/bin/env node
/*
 * Copyright (c) 2013 Trent Mick. All rights reserved.
 * Copyright (c) 2013 Joyent, Inc. All rights reserved.
 *
 * A Molybdenum client CLI.
 */

var p = console.log;
var util = require('util');

var assert = require('assert-plus');
var async = require('async');
var bunyan = require('bunyan');
var cmdln = require('cmdln'),
    Cmdln = cmdln.Cmdln;
var restify = require('restify');

var molybdenum = require('../lib/index');



//---- globals

var NAME = 'mo';
var VERSION = require('../package.json').version;

var log = bunyan.createLogger({
    name: NAME,
    serializers: restify.bunyan.serializers,
    stream: process.stderr,
    level: 'info'
});



//---- internal support functions

function fatal(msg, code) {
    assert.string(msg, 'msg');
    assert.optionalNumber(code, 'code');
    code = code === undefined ? 1 : code;
    console.error(NAME + ': error: ' + message);
    process.exit(code);
}



//---- Mo cmdln class.

function Mo() {
    Cmdln.call(this, {
        name: NAME,
        desc: 'A Molybdenum client tool',
        // Custom options. By default you get -h/--help.
        options: [
            {names: ['help', 'h'], type: 'bool', help: 'Print help and exit.'},
            {name: 'version', type: 'bool', help: 'Print version and exit.'},
            {names: ['verbose', 'v'], type: 'bool', help: 'Verbose/debug output.'},
            {
                names: ['url', 'U'],
                type: 'string',
                // TODO: when ready
                //env: 'MOLYBDENUM_URL',
                env: 'MO2_URL',
                help: 'Molybdenum server.',
                helpArg: 'URL'
            },
        ],
        helpOpts: {
            includeEnv: true,
            minHelpCol: 23 /* line up with option help */
        }
    });
}
util.inherits(Mo, Cmdln);

// Custom `init` to handle custom options (i.e. 'version' defined above).
Mo.prototype.init = function (opts, args, callback) {
    if (opts.version) {
        p(this.name, VERSION);
        callback(false);
        return;
    }
    this.opts = opts;
    if (opts.verbose) {
        log.level('trace');
        log.src = true;
    }
    // Cmdln class handles `opts.help`.
    Cmdln.prototype.init.apply(this, arguments);
};

Mo.prototype.getClient = function () {
    if (!this._client) {
        var clientOpts = {
            url: this.opts.url,
            log: log.child({component: 'api'}, true)
        };
        this._client = molybdenum.createClient(clientOpts)
    }
    return this._client;
};


Mo.prototype.do_ping = function (subcmd, opts, args, callback) {
    if (opts.help) {
        this.do_help('help', {}, [subcmd], callback);
        return;
    }
    var error = opts.e ? 'InternalError' : undefined;
    this.getClient().ping(error, function (err, pong, res) {
        if (err) return callback(err);
        p(JSON.stringify(pong, null, 4));
        callback();
    });
};
Mo.prototype.do_ping.options = [
    {
        names: ['help', 'h'],
        type: 'bool',
        help: 'Show this help.'
    },
    {
        name: 'e',
        type: 'bool',
        help: 'Simulate an error.'
    }
];
Mo.prototype.do_ping.help = (
    'Ping the molybdenum server.\n'
    + '\n'
    + 'Usage:\n'
    + '     mo ping [<options>]\n'
    + '\n'
    + '{{options}}'
);


Mo.prototype.do_state = function (subcmd, opts, args, callback) {
    if (opts.help) {
        this.do_help('help', {}, [subcmd], callback);
        return;
    }
    var error = opts.e ? 'InternalError' : undefined;
    this.getClient().getState(error, function (err, state, res) {
        if (err) return callback(err);
        p(JSON.stringify(state, null, 4));
        callback();
    });
};
Mo.prototype.do_state.options = [
    {
        names: ['help', 'h'],
        type: 'bool',
        help: 'Show this help.'
    }
];
Mo.prototype.do_state.help = (
    'Dump internal server state (used for server dev/debugging).\n'
    + '\n'
    + 'Usage:\n'
    + '     mo state [<options>]\n'
    + '\n'
    + '{{options}}'
);


Mo.prototype.do_repos = function (subcmd, opts, args, callback) {
    if (opts.help) {
        this.do_help('help', {}, [subcmd], callback);
        return;
    }
    var error = opts.e ? 'InternalError' : undefined;
    this.getClient().listRepos(error, function (err, repos, res) {
        if (err) return callback(err);
        p(JSON.stringify(repos, null, 4));
        callback();
    });
};
Mo.prototype.do_repos.options = [
    {
        names: ['help', 'h'],
        type: 'bool',
        help: 'Show this help.'
    }
];
Mo.prototype.do_repos.help = (
    'List repos in the site.\n'
    + '\n'
    + 'Usage:\n'
    + '     mo repos [<options>]\n'
    + '\n'
    + '{{options}}'
);


Mo.prototype.do_fetch = function (subcmd, opts, args, callback) {
    if (opts.help) {
        this.do_help('help', {}, [subcmd], callback);
        return;
    }
    p('XXX args', args)
    assert.string(args[0], '<repo-name> argument');
    assert.string(args[1], '<repo-url> argument');
    var repoName = args[0];
    var repoUrl = args[1];
    this.getClient().fetchRepo(repoName, repoUrl, function (err, body, res) {
        if (err) return callback(err);
        //XXX non-json output
        p(JSON.stringify(body, null, 4));
        callback();
    });
};
Mo.prototype.do_fetch.options = [
    {
        names: ['help', 'h'],
        type: 'bool',
        help: 'Show this help.'
    },
];
Mo.prototype.do_fetch.help = (
    'Tell the molybdenum server to fetch the given URL.\n'
    + '\n'
    + 'Usage:\n'
    + '     mo fetch [<options>] <repo-name> <repo-url>\n'
    + '\n'
    + '{{options}}'
);



//---- mainline

if (require.main === module) {
    var cli = new Mo();
    cli.main(process.argv, function (err, subcmd) {
        if (err) {
            var subcmdStr = subcmd ? ' ' + subcmd : '';
            if (err.body && err.body.code) {
                console.error('%s%s: error (%s): %s', cli.name, subcmdStr,
                    err.body.code, err.message);
            } else {
                console.error('%s%s: error: %s', cli.name, subcmdStr,
                    err.message);
            }
            if (cli.opts.verbose && err.stack) {
                console.error('\n' + err.stack);
            }
            process.exit(1);
        } else {
            process.exit(0);
        }
    });
}

